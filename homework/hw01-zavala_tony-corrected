"""Hw 01 - Tony Zavala - 9 October 2013 - UCSC - Computational Methods - Pranav Anand"""

__author__ = 'tonyzav'
__email__ = "arzavala@ucsc.edu"
__credits__ = ["thanks to Chelsea Miller for bringing to my attention the invaluable index method wrt complex onsets"]


#problem 1
#1. I worked alone on this assignment
#2. My github account is tonyzav, i.e. github.com/tonyzav

#problem 2 Improving PigLatin A
#!!! These quotes need to match (was """text''')
"""Creates a PigLatin generator."""

__author__ = 'tonyzav'
__email__ = "arzavala@ucsc.edu"
__credits__ = ["thanks to Chelsea Miller for bringing to my attention the invaluable index method wrt complex onsets"]

def pigLatin(w):
    """
	this function handles pigLatin for word w

    Args:
		w: a word

    Returns:
        pigLatined: a PigLatin representation of word w

    Raises:
        Nothing

	"""
    
    pigLatined = w #not what you'll do, but it will allow us to run the test

    # put all your code in here
    
    #!!! If you don't need it, you can delete it
   # w = list(w) #cast the string as a list #turns out I didn't need this
    ay = "ay" ##create a local variable that exists throughout the function. This is just for convenience and laziness.
    
    #!!! If the input string were preprocessed to lowercase, we'd only need to check half as many vowels
    vowels = "a, e, i, o, u, A, E, I, O, U"
    #for item in vowels:
    #!!! Is the above a comment, or some stray code? The commenting's a bit sparse through here
    if w[0] in vowels:
        if w[-1] == "e":
            rest = w[:-1] #stores the whole word less the 'e' at the end
            #!!! Given that these return statements are identical, they could be taken out of the loop and a single statement shared
            return rest+ay
        else:
            rest = word
            return rest+ay
    #!!! Do we care that the first character's a digit, or that the string isn't all letters?
    elif w[0].isdigit(): #if the first character is a digit, do nothing
            return w

        
    else:
        #!!! In the comment below, be precise. What's 'it'?
        wlist = list(w) #break it down into a list
        for token in wlist: #doing a for loop over the elements of the list
            if token in vowels: #whenever one of the elements is a vowel
                pos = w.index(token)
                onset = word[0:pos]
                rest = word[pos:]
                return rest+onset+ay

#problem 3 Improving PigLatin B
'''Creates a PigLatin generator.'''

__author__ = 'tonyzav'
__email__ = "arzavala@ucsc.edu"
__credits__ = ["thanks to Chelsea Miller for bringing to my attention the invaluable index method wrt complex onsets"]

def pigLatin(w, d):
    """
	this function handles pigLatin for word w, for dialect d

    Args:
		w: a word
        d: a dialect (as a string)

    Returns:
        pigLatined: a PigLatin representation of word w

    Raises:
        Nothing

	"""
    
    pigLatined = w #not what you'll do, but it will allow us to run the test

    # put all your code in here
    # w = list(w) #cast the string as a list #turns out I didn't need this
    
    #!!! These lines are equivalent to a single ay = d
    #!!! The ay variable is perhaps a little confusing now that we have dialects. I'd suggest 'ending' or something
    if d == "yay":
        ay = "yay" 
    elif d == "way":
        ay = "way"
    else:
        ay = "ay"
    
    vowels = "a, e, i, o, u, A, E, I, O, U"
      
    #for item in vowels:
    if w[0] in vowels:
        if w[-1] == "e":
            rest = w[:-1] #stores the whole word less the 'e' at the end
            return rest+ay
        else:
            rest = w
            return rest+ay
    elif w[0].isdigit(): #if the first character is a digit, do nothing
            return w

        
    else:
        wlist = list(w) #break it down into a list
        for token in wlist: #doing a for loop over the elements of the list
            if token in vowels: #whenever one of the elements is a vowel
                pos = w.index(token)
                onset = w[0:pos]
                rest = w[pos:]
                #!!! With consonantal roots, the glide gets stripped from the 'way' and 'yay' endings. This will incorrectly return 'inkthyay' for 'think' in the 'yay' dialect.
                return rest+onset+ay
                

#problem 4
'''Creates a PigLatin generator.'''

__author__ = 'tonyzav'
__email__ = "arzavala@ucsc.edu"
__credits__ = ["thanks to Chelsea Miller for bringing to my attention the invaluable index method wrt complex onsets"]

def pigLatin(w):
    """
	this function handles pigLatin for word w

    Args:
		w: a word

    Returns:
        pigLatined: a PigLatin representation of word w

    Raises:
        Nothing

	"""
    
    pigLatined = w #not what you'll do, but it will allow us to run the test

    # put all your code in here
    
   # w = list(w) #cast the string as a list #turns out I didn't need this
    ay = "ay" ##create a local variable that exists throughout the function. This is just for convenience and laziness.
    
    vowels = "a, e, i, o, u, A, E, I, O, U"
    #for item in vowels:
    if w[0] in vowels:
        if w[-1] == "e":
            rest = w[:-1] #stores the whole word less the 'e' at the end
            return rest+ay
        else:
            rest = w
            return rest+ay
    elif w[0].isdigit(): #if the first character is a digit, do nothing
            return w

        
    else:
        wlist = list(w) #break it down into a list
        #print "wlist", wlist
        for token in wlist: #doing a for loop over the elements of the list
            if token in vowels: #whenever one of the elements is a vowel
                pos = w.index(token)
                onset = w[0:pos]
                rest = w[pos:]
                return rest+onset+ay

def pigLatinParts(text):
    """
	this function handles pigLatin for all words in string S. It also remembers the punctuation as at the last Goedel number.

    Args:
		text: a string

    Returns:
        pigLatined: what people can download and use (a program)
        
    Raises:
        Nothing

	"""

    # my suggestion: break this into a few parts:
    # 1) break up the text into tokens
    # 2) run a for loop over each token where you get the pigLatined version of that
    #      for (2), you'll need to call pigLatin on that token
    # 3) put it all together to make one piece of text
    #      for that, you can use another for loop and + (just keep adding to the string you are going to return
    #      OR you can use a function called join []; see the note below 
    
    tokens = text.split(" ")
    PLarray = []
    punct = {",",".","?","'","!"}
    
    for token in tokens:
        #!!! This is a successful way of stripping punctuation, but we want to preserve it somehow in the output string. How might that be accomplished?
        if token[-1] in punct:
            #!!! This appears to do nothing to words with punctuation at the end. Don't forget to pigLatin them.
            #!!! How about saving and appending pigLatin(token[0:-1]) + token[-1]?
            token = token[0:-1]
        else:
            PLarray.append(pigLatin(token))
    
    return " ".join(PLarray)
    
    #there's nothing in here about ifway or actuallyay. 
    
#problem 5
#!!! Very nice.
dictionary = {} #initializing an empty dictionary
string = '''When I was little, I thought a python was a snake.
            Now I know it is really a monster in disguise.
            But I will prevail over this hideous beast.'''

dictionary["python"] = {"def": "A type of large constricting snake.",
                        "pos": "n",
                        "phon": "ˈpaɪθɑːn"}
dictionary["little"] = {"def": "Small in size.",
                        "pos": "a",
                        "phon": "ˈlɪɾl"}
dictionary["was"] = {"def": "First-person singular simple past tense indicative of be.",
                        "pos": "v",
                        "phon": "wəz"}
dictionary["I"] = {"def": "The speaker or writer, referred to as the grammatical subject, of a sentence.",
                        "pos": "n",
                        "phon": "aɪ"}
dictionary["when"] = {"def": "(interrogative) Used to introduce questions about time.",
                        "pos": "adv",
                        "phon": "wɛn"}
dictionary["thought"] = {"def": "simple past tense and past participle of think",
                        "pos": "v",
                        "phon": "θɔt"}
dictionary["thought"] = {"def": "simple past tense and past participle of think",
                        "pos": "v",
                        "phon": "θɔt"}
dictionary["a"] = {"def": "One; any indefinite example of; used to denote a singular item of a group.",
                        "pos": "d",
                        "phon": "ə"}
dictionary["snake"] = {"def": "A legless reptile of the sub-order Serpentes with a long, thin body and a fork-shaped tongue.",
                        "pos": "n",
                        "phon": "sneɪk"}
dictionary["now"] = {"def": "At the present time.",
                        "pos": "adv",
                        "phon": "naʊ̯"}
dictionary["now"] = {"def": "At the present time.",
                        "pos": "adv",
                        "phon": "naʊ"}
dictionary["know"] = {"def": "To be certain or sure about.",
                        "pos": "n",
                        "phon": "noʊ"}
dictionary["it"] = {"def": "The third-person singular personal pronoun used to refer to an inanimate object, to an inanimate thing with no or unknown sex or gender.",
                        "pos": "pn",
                        "phon": "ɪt"}
dictionary["is"] = {"def": "third-person singular simple present indicative form of be.",
                        "pos": "v",
                        "phon": "ɪz"}
dictionary["really"] = {"def": "Actually; in fact; in reality.",
                        "pos": "adv",
                        "phon": "ˈɹiəli"}
dictionary["monster"] = {"def": "A terrifying and dangerous, wild or fictional creature.",
                        "pos": "n",
                        "phon": "ˈmɑnstɚ"}
dictionary["in"] = {"def": "Contained by.",
                        "pos": "p",
                        "phon": "ɪn"}
dictionary["disguise"] = {"def": "Attire (e.g. clothing, makeup) used to hide one's identity or assume another.",
                        "pos": "n",
                        "phon": "dɪˈskaɪz"}
dictionary["but"] = {"def": "Except (for), excluding. Preceded by a negation.",
                        "pos": "conj",
                        "phon": "bʌt"}
dictionary["will"] = {"def": "future tense.",
                        "pos": "v",
                        "phon": "wɪl"}
dictionary["prevail"] = {"def": "To be superior in strength, dominance, influence or frequency; to have or gain the advantage over others; to have the upper hand; to outnumber others.",
                        "pos": "v",
                        "phon": "pɹəveɪl"}
dictionary["over"] = {"def": "On top of; above; higher than; further up.",
                        "pos": "p",
                        "phon": "ˈoʊ.vɚ"}
dictionary["this"] = {"def": "The (thing) here (used in indicating something or someone nearby).",
                        "pos": "d",
                        "phon": "ðɪs"}
dictionary["hideous"] = {"def": "Frightful; shocking; extremely ugly.",
                        "pos": "a",
                        "phon": "ˈhɪd.iː.ʌs"}
dictionary["hideous"] = {"def": "Frightful; shocking; extremely ugly.",
                        "pos": "a",
                        "phon": "ˈhɪd.iː.ʌs"}
dictionary["beast"] = {"def": "Any animal other than a human; usually only applied to land vertebrates, especially large or dangerous four-footed ones.",
                        "pos": "n",
                    "phon": "biːst"}


